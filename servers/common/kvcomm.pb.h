// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvcomm.proto

#ifndef PROTOBUF_INCLUDED_kvcomm_2eproto
#define PROTOBUF_INCLUDED_kvcomm_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_kvcomm_2eproto 

namespace protobuf_kvcomm_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_kvcomm_2eproto
namespace kv {
class command;
class commandDefaultTypeInternal;
extern commandDefaultTypeInternal _command_default_instance_;
}  // namespace kv
namespace google {
namespace protobuf {
template<> ::kv::command* Arena::CreateMaybeMessage<::kv::command>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace kv {

// ===================================================================

class command : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kv.command) */ {
 public:
  command();
  virtual ~command();

  command(const command& from);

  inline command& operator=(const command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  command(command&& from) noexcept
    : command() {
    *this = ::std::move(from);
  }

  inline command& operator=(command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const command* internal_default_instance() {
    return reinterpret_cast<const command*>(
               &_command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(command* other);
  friend void swap(command& a, command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline command* New() const final {
    return CreateMaybeMessage<command>(NULL);
  }

  command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const command& from);
  void MergeFrom(const command& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string comm_type = 1;
  bool has_comm_type() const;
  void clear_comm_type();
  static const int kCommTypeFieldNumber = 1;
  const ::std::string& comm_type() const;
  void set_comm_type(const ::std::string& value);
  #if LANG_CXX11
  void set_comm_type(::std::string&& value);
  #endif
  void set_comm_type(const char* value);
  void set_comm_type(const char* value, size_t size);
  ::std::string* mutable_comm_type();
  ::std::string* release_comm_type();
  void set_allocated_comm_type(::std::string* comm_type);

  // optional string sender_type = 2;
  bool has_sender_type() const;
  void clear_sender_type();
  static const int kSenderTypeFieldNumber = 2;
  const ::std::string& sender_type() const;
  void set_sender_type(const ::std::string& value);
  #if LANG_CXX11
  void set_sender_type(::std::string&& value);
  #endif
  void set_sender_type(const char* value);
  void set_sender_type(const char* value, size_t size);
  ::std::string* mutable_sender_type();
  ::std::string* release_sender_type();
  void set_allocated_sender_type(::std::string* sender_type);

  // optional string sender_address = 3;
  bool has_sender_address() const;
  void clear_sender_address();
  static const int kSenderAddressFieldNumber = 3;
  const ::std::string& sender_address() const;
  void set_sender_address(const ::std::string& value);
  #if LANG_CXX11
  void set_sender_address(::std::string&& value);
  #endif
  void set_sender_address(const char* value);
  void set_sender_address(const char* value, size_t size);
  ::std::string* mutable_sender_address();
  ::std::string* release_sender_address();
  void set_allocated_sender_address(::std::string* sender_address);

  // required int32 job_id = 4;
  bool has_job_id() const;
  void clear_job_id();
  static const int kJobIdFieldNumber = 4;
  ::google::protobuf::int32 job_id() const;
  void set_job_id(::google::protobuf::int32 value);

  // optional int32 data_center = 5;
  bool has_data_center() const;
  void clear_data_center();
  static const int kDataCenterFieldNumber = 5;
  ::google::protobuf::int32 data_center() const;
  void set_data_center(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:kv.command)
 private:
  void set_has_comm_type();
  void clear_has_comm_type();
  void set_has_sender_type();
  void clear_has_sender_type();
  void set_has_sender_address();
  void clear_has_sender_address();
  void set_has_job_id();
  void clear_has_job_id();
  void set_has_data_center();
  void clear_has_data_center();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr comm_type_;
  ::google::protobuf::internal::ArenaStringPtr sender_type_;
  ::google::protobuf::internal::ArenaStringPtr sender_address_;
  ::google::protobuf::int32 job_id_;
  ::google::protobuf::int32 data_center_;
  friend struct ::protobuf_kvcomm_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// command

// required string comm_type = 1;
inline bool command::has_comm_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void command::set_has_comm_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void command::clear_has_comm_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void command::clear_comm_type() {
  comm_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comm_type();
}
inline const ::std::string& command::comm_type() const {
  // @@protoc_insertion_point(field_get:kv.command.comm_type)
  return comm_type_.GetNoArena();
}
inline void command::set_comm_type(const ::std::string& value) {
  set_has_comm_type();
  comm_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kv.command.comm_type)
}
#if LANG_CXX11
inline void command::set_comm_type(::std::string&& value) {
  set_has_comm_type();
  comm_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kv.command.comm_type)
}
#endif
inline void command::set_comm_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_comm_type();
  comm_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kv.command.comm_type)
}
inline void command::set_comm_type(const char* value, size_t size) {
  set_has_comm_type();
  comm_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kv.command.comm_type)
}
inline ::std::string* command::mutable_comm_type() {
  set_has_comm_type();
  // @@protoc_insertion_point(field_mutable:kv.command.comm_type)
  return comm_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* command::release_comm_type() {
  // @@protoc_insertion_point(field_release:kv.command.comm_type)
  if (!has_comm_type()) {
    return NULL;
  }
  clear_has_comm_type();
  return comm_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void command::set_allocated_comm_type(::std::string* comm_type) {
  if (comm_type != NULL) {
    set_has_comm_type();
  } else {
    clear_has_comm_type();
  }
  comm_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comm_type);
  // @@protoc_insertion_point(field_set_allocated:kv.command.comm_type)
}

// optional string sender_type = 2;
inline bool command::has_sender_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void command::set_has_sender_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void command::clear_has_sender_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void command::clear_sender_type() {
  sender_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender_type();
}
inline const ::std::string& command::sender_type() const {
  // @@protoc_insertion_point(field_get:kv.command.sender_type)
  return sender_type_.GetNoArena();
}
inline void command::set_sender_type(const ::std::string& value) {
  set_has_sender_type();
  sender_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kv.command.sender_type)
}
#if LANG_CXX11
inline void command::set_sender_type(::std::string&& value) {
  set_has_sender_type();
  sender_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kv.command.sender_type)
}
#endif
inline void command::set_sender_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sender_type();
  sender_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kv.command.sender_type)
}
inline void command::set_sender_type(const char* value, size_t size) {
  set_has_sender_type();
  sender_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kv.command.sender_type)
}
inline ::std::string* command::mutable_sender_type() {
  set_has_sender_type();
  // @@protoc_insertion_point(field_mutable:kv.command.sender_type)
  return sender_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* command::release_sender_type() {
  // @@protoc_insertion_point(field_release:kv.command.sender_type)
  if (!has_sender_type()) {
    return NULL;
  }
  clear_has_sender_type();
  return sender_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void command::set_allocated_sender_type(::std::string* sender_type) {
  if (sender_type != NULL) {
    set_has_sender_type();
  } else {
    clear_has_sender_type();
  }
  sender_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_type);
  // @@protoc_insertion_point(field_set_allocated:kv.command.sender_type)
}

// optional string sender_address = 3;
inline bool command::has_sender_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void command::set_has_sender_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void command::clear_has_sender_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void command::clear_sender_address() {
  sender_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender_address();
}
inline const ::std::string& command::sender_address() const {
  // @@protoc_insertion_point(field_get:kv.command.sender_address)
  return sender_address_.GetNoArena();
}
inline void command::set_sender_address(const ::std::string& value) {
  set_has_sender_address();
  sender_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kv.command.sender_address)
}
#if LANG_CXX11
inline void command::set_sender_address(::std::string&& value) {
  set_has_sender_address();
  sender_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kv.command.sender_address)
}
#endif
inline void command::set_sender_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sender_address();
  sender_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kv.command.sender_address)
}
inline void command::set_sender_address(const char* value, size_t size) {
  set_has_sender_address();
  sender_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kv.command.sender_address)
}
inline ::std::string* command::mutable_sender_address() {
  set_has_sender_address();
  // @@protoc_insertion_point(field_mutable:kv.command.sender_address)
  return sender_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* command::release_sender_address() {
  // @@protoc_insertion_point(field_release:kv.command.sender_address)
  if (!has_sender_address()) {
    return NULL;
  }
  clear_has_sender_address();
  return sender_address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void command::set_allocated_sender_address(::std::string* sender_address) {
  if (sender_address != NULL) {
    set_has_sender_address();
  } else {
    clear_has_sender_address();
  }
  sender_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_address);
  // @@protoc_insertion_point(field_set_allocated:kv.command.sender_address)
}

// required int32 job_id = 4;
inline bool command::has_job_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void command::set_has_job_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void command::clear_has_job_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void command::clear_job_id() {
  job_id_ = 0;
  clear_has_job_id();
}
inline ::google::protobuf::int32 command::job_id() const {
  // @@protoc_insertion_point(field_get:kv.command.job_id)
  return job_id_;
}
inline void command::set_job_id(::google::protobuf::int32 value) {
  set_has_job_id();
  job_id_ = value;
  // @@protoc_insertion_point(field_set:kv.command.job_id)
}

// optional int32 data_center = 5;
inline bool command::has_data_center() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void command::set_has_data_center() {
  _has_bits_[0] |= 0x00000010u;
}
inline void command::clear_has_data_center() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void command::clear_data_center() {
  data_center_ = 0;
  clear_has_data_center();
}
inline ::google::protobuf::int32 command::data_center() const {
  // @@protoc_insertion_point(field_get:kv.command.data_center)
  return data_center_;
}
inline void command::set_data_center(::google::protobuf::int32 value) {
  set_has_data_center();
  data_center_ = value;
  // @@protoc_insertion_point(field_set:kv.command.data_center)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace kv

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_kvcomm_2eproto
